# -*- coding: utf-8 -*-
"""DecisionTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eTJPdHtyUs769-L_2TwpWuKbVoyDpJN5
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from sklearn.tree import export_graphviz
import graphviz

from google.colab import files
uploaded = files.upload()

base = pd.read_csv('insurance.csv')
base

base = base.drop(columns = ['Unnamed: 0'])

y = base.iloc[:,7].values
X = base.iloc[:,[0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]].values

X

labelencoder = LabelEncoder()

for i in range(X.shape[1]):
  if (X[:,i].dtype == 'object'):
    X[:,i] = labelencoder.fit_transform(X[:,i])

X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(X, y, test_size = 0.3, random_state = 1)

# acuracia = 92
# modelo = DecisionTreeClassifier(random_state = 1)

# acuracia = 94
# modelo = DecisionTreeClassifier(random_state = 1, max_depth = 8)

# acuracia = 93
# modelo = DecisionTreeClassifier(random_state = 1, max_depth = 8, max_leaf_nodes = 8)

modelo = DecisionTreeClassifier(random_state = 1, max_depth = 8, max_leaf_nodes = 2)
modelo.fit(X_treinamento, y_treinamento)

dot_data = export_graphviz(modelo, out_file = None, filled = True, feature_names = base.columns[:-1], class_names = True, rounded = True)

graph = graphviz.Source(dot_data)
graph.render("decision_tree", format = "png")
graph.view()

previsoes = modelo.predict(X_teste)

accuracy = accuracy_score(y_teste, previsoes)
precision = precision_score(y_teste, previsoes, average = 'weighted')
recall = recall_score(y_teste, previsoes, average = 'weighted')
f1 = f1_score(y_teste, previsoes, average = 'weighted')
print(f'Acuracia: {accuracy}, Precision: {precision}, Recall: {recall}, F1: {f1}')

report = classification_report(y_teste, previsoes)
print(report)

