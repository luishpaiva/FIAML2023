# -*- coding: utf-8 -*-
"""XAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r74qCxuq2yletx6M9Uh3V0d9qikw6NKR
"""

!pip install lime
!pip install interpret
!pip install eli5
!pip install shap

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import IPython
import eli5
from eli5 import show_prediction
import shap
import lime.lime_tabular
from interpret import set_visualize_provider
from interpret import show
from interpret.provider import InlineProvider
from interpret.glassbox import ExplainableBoostingClassifier

credito = pd.read_csv("Credit.csv")

credito.shape

credito.head()

previsores = credito.iloc[:, :-1].values
classe = credito.iloc[:, -1].values

labelencoder = LabelEncoder()

for i in range(previsores.shape[1]):
  if (previsores[:, i].dtype == 'object'):
    previsores[:, i] = labelencoder.fit_transform(previsores[:, i])

classe = labelencoder.fit_transform(classe)

X_treinamento, X_teste, y_treinamento, y_test = train_test_split(previsores, classe, test_size = 0.3)

modelo = RandomForestClassifier(n_estimators = 1000)
modelo.fit(X_treinamento, y_treinamento)

"""### Lime"""

expl = lime.lime_tabular.LimeTabularExplainer(X_treinamento, feature_names = list(credito)[0:20], class_names = "class")
prever = lambda x: modelo.predict_proba(x).astype(float)

exp = expl.explain_instance(X_teste[0], prever, num_features = 5)
exp.show_in_notebook(show_all = True)

y_test[0]

"""### eli5"""

eli5.show_weights(modelo, feature_names = list(credito)[0: 20])

previsores[1]

eli5.show_prediction(modelo, previsores[1], feature_names = list(credito)[0: 20], show_feature_values = True)

"""### Shap"""

X_treinamento2 = X_treinamento.astype(float)
explainer = shap.Explainer(modelo, X_treinamento2)
shap_values = explainer.shap_values(X_teste)
shap.summary_plot(shap_values, X_teste, feature_names = list(credito)[0: 20], plot_type = 'bar')
shap.force_plot(explainer.expected_value[1], shap_values[1])
shap.initjs()

"""### Interpret"""

set_visualize_provider(InlineProvider())
ebm = ExplainableBoostingClassifier(feature_names = list(credito)[0: 20])
ebm.fit(X_treinamento, y_treinamento)
global_explanation = ebm.explain_global()
show(global_explanation)

