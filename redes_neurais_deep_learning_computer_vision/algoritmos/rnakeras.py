# -*- coding: utf-8 -*-
"""RNAKeras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u6V4X9rTcdvuVAP9PpnBZyEeeu_boFhO
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, f1_score, recall_score, confusion_matrix
from keras.models import Sequential
from keras.layers import Dense, Dropout

df = pd.read_csv("Churn_treino.csv", sep = ";")
df

X = df.drop("Exited", axis = 1)
y = df["Exited"]

# padronização
standardscaler = StandardScaler()
numerical = X.select_dtypes(include = ['int64', 'float']).columns
X[numerical] = standardscaler.fit_transform(X[numerical])

X

# label encoder
labelencoder = LabelEncoder()
categorical = X.select_dtypes(include = 'object').columns
for col in categorical:
  X[col] = labelencoder.fit_transform(X[col])

X

X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size = 0.3, random_state = 0)

modelo = Sequential()
modelo.add(Dense(units = 64, activation = 'relu', input_dim = X_treino.shape[1])) # primeira camada oculta (densa), com parâmetro da camada de entrada
modelo.add(Dropout(0.4)) # primeira camada de dropout
modelo.add(Dense(units = 32, activation = 'relu')) # segunda camada oculta (densa), sem parâmetro da camada de entrada
modelo.add(Dropout(0.4)) # segunda camada de dropout
modelo.add(Dense(units = 64, activation = 'relu')) # terceira camada oculta (densa), sem parâmetro da camada de entrada
modelo.add(Dropout(0.4)) # terceira camada de dropout
modelo.add(Dense(units = 1, activation = 'sigmoid')) # camada final (saída)

modelo.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
modelo.fit(X_treino, y_treino, epochs = 50, batch_size = 32)

previsoes = modelo.predict(X_teste)
previsoes

y_pred = (previsoes > 0.5).astype('int32')
y_pred

print('Acurácia: ', accuracy_score(y_teste, y_pred))
print('F1: ', f1_score(y_teste, y_pred))
print('Recall: ', recall_score(y_teste, y_pred))
print('Matriz de Confusão: ', confusion_matrix(y_teste, y_pred))