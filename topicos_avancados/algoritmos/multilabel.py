# -*- coding: utf-8 -*-
"""MultiLabel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n-DiJtp5AowQfPLd0AtihxbiP4znv2_u
"""

!pip install scikit-multilearn

from skmultilearn.adapt import MLARAM
from skmultilearn.problem_transform import BinaryRelevance, ClassifierChain, LabelPowerset
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import hamming_loss
import pandas as pd

from google.colab import files
uploaded = files.upload()

musica = pd.read_csv('Musica.csv')
musica.shape

musica.head()

classe = musica.iloc[:, 0:6].values
previsores = musica.iloc[:, 7:78].values
classe

X_treinamento, X_teste,  y_treinamento, y_teste = train_test_split(previsores, classe, test_size = 0.3, random_state = 0)

ann = MLARAM()
ann.fit(X_treinamento, y_treinamento)

previsto = ann.predict(X_teste)
print(hamming_loss(y_teste, previsto))

binary = BinaryRelevance(classifier = SVC())
binary.fit(X_treinamento, y_treinamento)
previsoes = binary.predict(X_teste)
print(hamming_loss(y_teste, previsoes))

chain = ClassifierChain(classifier = SVC())
chain.fit(X_treinamento, y_treinamento)
previsoes = binary.predict(X_teste)
print(hamming_loss(y_teste, previsoes))

label = LabelPowerset(classifier = SVC())
label.fit(X_treinamento, y_treinamento)
previsoes = label.predict(X_teste)
print(hamming_loss(y_teste, previsoes))

